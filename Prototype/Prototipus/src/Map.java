import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedHashMap;

import javax.imageio.ImageIO;
/**
 * T·rolja a p·lya kÈpÈs Ès a p·ly·t meghat·rozÛ maskot.
 * UtÛbbi segÌtsÈgÈvel ·llapÌtja meg, hogy az adott pozÌciÛ a p·lya ter¸letÈn tal·lhatÛ-e.
 */
public class Map implements GameObject {

	private int protoID;
	private static int protoIDNext=0;
	
	private BufferedImage mapScenery=null; //A t√©rk√©pet alkot√≥ maszkon k√≠v√ºli grafika
	private BufferedImage mask=null; //A t√©rk√©p p√°ly√°t reprezent√°l√≥ koordin√°t√°it tartalmaz√≥ maszk
	private BufferedImage trackLine=null;
	
	public String mapImage=null;
	public String outOfTrackMaskFile=null;

	/**
	 * A Map oszt·ly paramÈter nÈlk¸li konstruktora.
	 * Ez a konstruktor a relatÌv "map.png" Ès "mask.png" ˙tvonalakrÛl tˆlti be a f·jlokat
	 */

	//Kellene bele valami amivel le lehet kerdezni a terkep meretet.
	public Map(){
		this("map.png","mask.png","trackline.png");
	}
	
	/**
	 * Ez a param√©terezett konstruktor seg√≠ti bet√∂lteni az adott grafik√°kat a p√°ly√°hoz.
	 * Ezzel a m√≥dszerrel nem kell minden Draw call-n√°l √∫jra beolvasni a t√©rk√©pet
	 * @param mappath: a t√©rk√©p (kieg√©sz√≠t≈ë) grafik√°j√°t tartalmaz√≥ k√©p √∫tvonala
	 * @param maskpath: a t√©rk√©p maszkj√°t tartalmaz√≥ k√©p √∫tvonala
	  * @param tracklinepath: a kisrobotok trackline-j√°nak maszkj√°t tartalmaz√≥ k√©p √∫tvonala
	 */
	public Map(String mappath,String maskpath, String tracklinepath){
		protoIDNext++;
		protoID=protoIDNext;
		try {
		    mapScenery = ImageIO.read(new File(mappath));
		    mask = ImageIO.read(new File(maskpath));
		    trackLine=ImageIO.read(new File(tracklinepath));
		    
		    mapImage=mappath;
		    outOfTrackMaskFile=mappath;
		  
		} catch (IOException e) {
			
		}
		
	}

	/**
	 * A met√≥dus feladata elpuszt√≠tani a robotot, ha az elhagyta a p√°ly√°t
	 * @param robi: a robot, amit vizsg√°lunk
	 */
	public void CollisionWithRobot(Robot robi){
		boolean onGround = robi.onTheGround();
		boolean out = isOutOfTrack(robi.getPosition());
		if(onGround && out)
		{
			robi.KillHim();
		}
	}
	
	/**
	 * Meg√°llap√≠tja, hogy az adott pont kint van-e a p√°ly√°r√≥l.
	 * 
	 * @param pos: vizsg√°land√≥ pont
	 */
	public boolean isOutOfTrack(Vector2D pos){
		int X=(int)pos.getX();
		int Y=(int)pos.getY();
		int A=mask.getRGB(X, Y) >> 24 & 0xFF;
		if(A==0){return true;}
		else{return false;}
	}

	/*public Vector2D[] getTrackLine(){
	
	
	}*/

	/**
	 * Friss√≠ti a t√©rk√©p √°llapot√°t.
	 * 
	 * @param g: az objektumot vez√©rl≈ë Game oszt√°ly.
	 */
	@Override
	public void Update(Game g){
		
	}
	
	/**
	 * Kirajzolja a t√©rk√©pet.
	 * 
	 * @param g: a grafikus k√∂rnyezet, amiben a kirajzol√°s t√∂rt√©nik.
	 */
	@Override
	public void Draw(Graphics g) {
	
	}
	
	@Override
	public int getProtoId() {
		return protoID;
	}

	@Override
	public LinkedHashMap<String, String> dump() {
		LinkedHashMap<String,String> result=new LinkedHashMap<String,String>(){{put("protoID",String.valueOf(protoID));}};
		return result;
	}


}